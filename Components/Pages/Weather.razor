@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@using Models
<script src="https://cdn.jsdelivr.net/npm/chart.js/dist/Chart.min.js"></script>

<PageTitle>Weather Chart</PageTitle>

<h1>Weather Chart</h1>

@if(locations == null)
{
    <p><em>Loading Locations...</em></p>
}
else
{
    <div class="form-field">
        <label>Select City:</label>
        <div>
            <select @onchange="ChangeCity" class="form-select">
                <option value="">-- Select City --</option>
                @if (locations != null)
                {
                    @foreach (var loc in locations)
                    {
                        <option value="@loc.City">@loc.City</option>
                    }
                }
            </select>
            <p></p>
        </div>
        <label>Select Start Date</label>
        <div>
            <InputDate TValue="DateTime" @bind-Value="StartDate" />
            <InputNumber @bind-Value="StartHour" Min="0" Max="23"/>
            <InputNumber @bind-Value="StartMinute" Min="0" Max="59"/>
        </div>
        <label>Select End Date</label>
        <div>
            <InputDate TValue="DateTime" @bind-Value="EndDate" />
            <InputNumber @bind-Value="EndHour" Min="0" Max="23"/>
            <InputNumber @bind-Value="EndMinute" Min="0" Max="59"/>
        </div>
        <button class="btn btn-primary" @onclick="ViewChart">Show Chart</button>
    </div>
}

@if (!renderChart)
{
    <p><em>No city chosen or no data avaiable</em></p>
}
else
{
    <div>
        <canvas id="weatherChart" width="500" height="250"></canvas>
    </div>
}


@code {
    private Location[]? locations;
    private bool renderChart = false;
    private string? selectedCityName;

    public DateTime StartDate = DateTime.Today, EndDate = DateTime.Today;
    public double StartHour = DateTime.Now.Hour, StartMinute = DateTime.Now.Minute;
    public double EndHour = DateTime.Now.Hour, EndMinute = DateTime.Now.Minute;

    protected override async Task OnInitializedAsync()
    {
        locations = await Http.GetFromJsonAsync<Models.Location[]>("/weather/Get-AllCities");
    }

    private async Task ChangeCity(ChangeEventArgs e)
    {
        var city = e.Value?.ToString();
        var loc = locations.FirstOrDefault(x => x.City == city);
        if (loc != null)
        {
            selectedCityName = city;
        }else
        {
            renderChart = false;
        }
    }

    private async Task ViewChart()
    {
        if (string.IsNullOrWhiteSpace(selectedCityName))
        {
            renderChart = false;
            return;
        }

        var weathersForCity = await Http.GetFromJsonAsync<Models.Weather[]>($"/weather/Get-ByCity?cityName={selectedCityName}");
        var lowerBound = StartDate.AddHours(StartHour).AddMinutes(StartMinute);

        //adjust lower bound for quarter of hour interval
        lowerBound = lowerBound.AddMinutes(-(lowerBound.Minute % 15)).AddSeconds(-lowerBound.Second).AddMilliseconds(-lowerBound.Millisecond);
        var now = EndDate.AddHours(EndHour).AddMinutes(EndMinute);

        //adjust upper bound for quarter of hour interval
        if (now.Minute % 15 != 0 || now.Second != 0 || now.Millisecond != 0)
        {
            now = now.AddMinutes(15 - (now.Minute % 15)).AddSeconds(-now.Second).AddMilliseconds(-now.Millisecond);
        }

        var selectedWeatherSpan = weathersForCity.Where(
            x => 
            {
                var dt = x.DateOnly.ToDateTime(x.TimeOnly);
                return dt >= lowerBound && dt <= now;
            }).ToList();

        var allTimes = new List<DateTime>();
        var current = lowerBound;
        
        while (current <= now)
        {
            allTimes.Add(current);
            current = current.AddMinutes(15);
        }

        var tempDict = selectedWeatherSpan.ToDictionary(
            w => w.DateOnly.ToDateTime(w.TimeOnly),
            w => (double?)w.TemperatureC
        );

        var temperatures = allTimes
            .Select(t => tempDict.TryGetValue(t, out var temp) ? temp : (double?)null)
            .ToList();

        var labels = allTimes.Select(t => t.ToString("HH:mm dd.MM")).ToList();

        renderChart = true;
        StateHasChanged();

        await Task.Delay(100);
        await JS.InvokeVoidAsync("weatherChart.render", "weatherChart", labels, temperatures);
    }
}
